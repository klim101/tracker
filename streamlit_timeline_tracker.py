# Timeline Tracker ‚Äî –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è ¬´–Ω–æ—Ç–Ω–∞—è —Ç–µ—Ç—Ä–∞–¥—å¬ª
# –ó–∞–ø—É—Å–∫: pip install streamlit plotly pandas python-dateutil streamlit-plotly-events
#         streamlit run streamlit_timeline_tracker.py

from __future__ import annotations
import json
from datetime import date, datetime, timedelta
from typing import Dict, List

import pandas as pd
import plotly.graph_objects as go
import streamlit as st
from dateutil.relativedelta import relativedelta
from streamlit_plotly_events import plotly_events

st.set_page_config(page_title="Timeline Tracker", layout="wide")

# =====================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
# =====================

def today() -> date:
    return date.today()


def to_date(x) -> date:
    if isinstance(x, date):
        return x
    return pd.to_datetime(x).date()


def start_of_month(d: date) -> date:
    return d.replace(day=1)


def days_in_month(d: date) -> int:
    first = start_of_month(d)
    nxt = first + relativedelta(months=1)
    return (nxt - first).days


def compute_size(note: str) -> int:
    """–†–∞–∑–º–µ—Ä —Ç–æ—á–∫–∏/–Ω–æ—Ç—ã —Ä–∞—Å—Ç—ë—Ç —Å –¥–ª–∏–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ (reward-–º–µ—Ö–∞–Ω–∏–∫–∞)."""
    if not note:
        return 4  # –º–∏–∫—Ä–æ-—Ç–æ—á–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞
    # 6 .. 28 px –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã
    n = len(note.strip())
    return max(6, min(28, 6 + n // 6))


# =====================
# Session State (–¥–∞–Ω–Ω—ã–µ)
# =====================
if "groups" not in st.session_state:
    # –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω; —Å—Ç–∞—Ä—Ç—É–µ–º —Å –¥–≤—É—Ö –ø—É—Å—Ç—ã—Ö –≥—Ä—É–ø–ø
    st.session_state.groups: List[str] = ["–†–∞–±–æ—Ç–∞", "–õ–∏—á–Ω–æ–µ"]

if "tracks" not in st.session_state:
    # —Å–ø–∏—Å–æ–∫ –¥–æ—Ä–æ–∂–µ–∫: {id, group, name}
    st.session_state.tracks: List[Dict] = []

if "entries" not in st.session_state:
    # –æ—Ç–º–µ—Ç–∫–∏: {date: ISO, track_id: str, note: str}
    st.session_state.entries: List[Dict] = []

if "birthday" not in st.session_state:
    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 28 —Å–µ–Ω—Ç—è–±—Ä—è
    st.session_state.birthday = {"m": 9, "d": 28}

# –æ–∫–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–±–µ–∑ –≤–∏–¥–∏–º—ã—Ö –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤)
END = today()
START = END - timedelta(days=120)
all_days = pd.date_range(START, END, freq="D")

# =====================
# –®–∞–ø–∫–∞ (–º–∏–Ω–∏–º–∞–ª–∏–∑–º, –±–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤)
# =====================
now = datetime.now()
hour = now.hour
if 5 <= hour < 11:
    day_emoji = "üåÖ"
elif 11 <= hour < 17:
    day_emoji = "‚òÄÔ∏è"
elif 17 <= hour < 22:
    day_emoji = "üåá"
else:
    day_emoji = "üåô"

# –º–µ—Ç—Ä–∏–∫–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
m_first = start_of_month(END)
month_pct = int(round((END - m_first).days / max(1, days_in_month(END)) * 100))

b = st.session_state.birthday
next_bd_year = END.year if (END.month, END.day) <= (b["m"], b["d"]) else END.year + 1
next_bd = date(next_bd_year, b["m"], b["d"])
days_to_bd = (next_bd - END).days

colA, colB = st.columns([1, 2])
with colA:
    st.markdown(f"### {day_emoji} \- {END.strftime('%d %b %Y')}")
with colB:
    st.markdown(
        f"**–ú–µ—Å—è—Ü –ø—Ä–æ–π–¥–µ–Ω –Ω–∞ ~{month_pct}%** ¬∑ **–¥–æ –î–† {days_to_bd} –¥–Ω.**",
    )

# =====================
# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
# =====================
# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ—Å—å Y): –≥—Ä—É–ø–ø—ã –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –ø–æ–¥ –Ω–∏–º–∏ –¥–æ—Ä–æ–∂–∫–∏, –≤–Ω–∏–∑—É \"–î–ù–ò\"
cat_labels: List[str] = []
CAT_GROUP_PREFIX = "‚ñß "  # –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã (–∫–ª–∏–∫ –ø–æ –Ω–µ–º—É –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–æ—Ä–æ–∂–∫—É)
CAT_TRACK_PREFIX = "‚Ä¢ "  # –¥–æ—Ä–æ–∂–∫–∞

for g in st.session_state.groups:
    cat_labels.append(f"{CAT_GROUP_PREFIX}{g}")
    for t in st.session_state.tracks:
        if t["group"] == g:
            cat_labels.append(f"{CAT_TRACK_PREFIX}{t['name']}")

cat_labels.append("–î–ù–ò")  # –±–∞–∑–æ–≤–∞—è —à–∫–∞–ª–∞ –≤–Ω–∏–∑—É

# –º–∞–ø–ø–∏–Ω–≥–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
track_label_to_id: Dict[str, str] = {}
for t in st.session_state.tracks:
    track_label_to_id[f"{CAT_TRACK_PREFIX}{t['name']}"] = t["id"]

# entries -> DataFrame
if st.session_state.entries:
    df_e = pd.DataFrame(st.session_state.entries)
    df_e["date"] = pd.to_datetime(df_e["date"]).dt.date
else:
    df_e = pd.DataFrame(columns=["date", "track_id", "note"])  # –ø—É—Å—Ç–æ

# =====================
# –§–∏–≥—É—Ä–∞ (–Ω–æ—Ç–Ω–∞—è —Ç–µ—Ç—Ä–∞–¥—å)
# =====================
fig = go.Figure()

# 0) —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ ‚Äî –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Ç–æ–Ω–∫–∞—è –ª–∏–Ω–∏—è
fig.add_vline(x=pd.Timestamp(END), line_width=1, line_dash="dot", line_color="rgba(0,0,0,0.4)")

# 1) –±–∞–∑–æ–≤–∞—è –Ω–∏–∂–Ω—è—è —à–∫–∞–ª–∞ –î–ù–ò: —Ç–æ–Ω–∫–∞—è —Å–µ—Ä–∞—è –ª–∏–Ω–∏—è + —Ç–∏–∫–∏ –ø–æ –¥–Ω—è–º
fig.add_trace(
    go.Scatter(
        x=all_days,
        y=["–î–ù–ò"] * len(all_days),
        mode="lines",
        line=dict(color="rgba(0,0,0,0.25)", width=1),
        hoverinfo="skip",
        showlegend=False,
    )
)
# —Ç–∏–∫–∏ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏) ‚Äî –µ–∂–µ–¥–Ω., –Ω–æ –æ—á–µ–Ω—å –ª—ë–≥–∫–∏–µ
fig.add_trace(
    go.Scatter(
        x=all_days,
        y=["–î–ù–ò"] * len(all_days),
        mode="markers",
        marker=dict(symbol="line-ns-open", size=12, color="rgba(0,0,0,0.25)"),
        hoverinfo="skip",
        showlegend=False,
    )
)

# 2) –≥—Ä—É–ø–ø—ã: –ø—É–Ω–∫—Ç–∏—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏ (–∫–ª–∏–∫ –ø–æ —Å—Ç—Ä–æ–∫–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–æ—Ä–æ–∂–∫—É)
for g in st.session_state.groups:
    ylab = f"{CAT_GROUP_PREFIX}{g}"
    # —Ç–æ–Ω–∫–∞—è –ª–∏–Ω–∏—è –ø–æ –≤—Å–µ–π —à–∏—Ä–∏–Ω–µ –æ–∫–Ω–∞
    fig.add_trace(
        go.Scatter(
            x=[all_days.min(), all_days.max()],
            y=[ylab, ylab],
            mode="lines",
            line=dict(color="rgba(0,0,0,0.15)", width=1, dash="dot"),
            hoverinfo="skip",
            showlegend=False,
        )
    )
    # –Ω–µ–≤–∏–¥–∏–º—ã–µ —Ç–æ—á–∫–∏-–∫–ª–∏–∫–∫–∞—á–µ—Ä—ã –ø–æ –∫–∞–∂–¥–æ–º—É –¥–Ω—é
    fig.add_trace(
        go.Scatter(
            x=all_days,
            y=[ylab] * len(all_days),
            mode="markers",
            marker=dict(size=8, color="rgba(0,0,0,0.001)"),
            hoverinfo="skip",
            name=f"add-track-{g}",
            showlegend=False,
        )
    )

# 3) –¥–æ—Ä–æ–∂–∫–∏: —Ç–æ–Ω–∫–∏–µ –ª–∏–Ω–∏–∏ + —Ç–æ—á–∫–∏/–Ω–æ—Ç—ã
for g in st.session_state.groups:
    for t in [t for t in st.session_state.tracks if t["group"] == g]:
        ylab = f"{CAT_TRACK_PREFIX}{t['name']}"
        # —Ç–æ–Ω–∫–∞—è –ª–∏–Ω–∏—è
        fig.add_trace(
            go.Scatter(
                x=[all_days.min(), all_days.max()],
                y=[ylab, ylab],
                mode="lines",
                line=dict(color="rgba(0,0,0,0.25)", width=1),
                hoverinfo="skip",
                showlegend=False,
            )
        )
        # —Ç–æ—á–∫–∏/–Ω–æ—Ç—ã –∏–∑ entries
        if not df_e.empty:
            dsub = df_e.loc[df_e["track_id"] == t["id"]].copy()
        else:
            dsub = pd.DataFrame(columns=df_e.columns)
        if not dsub.empty:
            dsub = dsub[(dsub["date"] >= START) & (dsub["date"] <= END)]
            if not dsub.empty:
                sizes = [compute_size(n) for n in dsub["note"].tolist()]
                # reward: –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–º–µ—Ç–∫–∞ ‚Äî —Å–∏–º–≤–æ–ª –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ ¬´–∑–≤–µ–∑–¥—É¬ª (–≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–æ—Ç—É)
                symbols = ["star" if (n and n.strip()) else "circle-open" for n in dsub["note"].tolist()]
                fig.add_trace(
                    go.Scatter(
                        x=pd.to_datetime(dsub["date"]),
                        y=[ylab] * len(dsub),
                        mode="markers",
                        marker=dict(size=sizes, symbol=symbols, line=dict(width=1, color="rgba(0,0,0,0.55)"), color="rgba(0,0,0,0.55)"),
                        hovertemplate=(
                            "<b>" + t['name'] + "</b><br>–î–∞—Ç–∞: %{x|%Y-%m-%d}<br>–ó–∞–º–µ—Ç–∫–∞: %{text}<extra></extra>"
                        ),
                        text=[(s if s else "‚Äî") for s in dsub["note"].tolist()],
                        showlegend=False,
                    )
                )
        # –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π —Å–ª–æ–π –ø–æ –¥–Ω—è–º (—á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∏ –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º)
        fig.add_trace(
            go.Scatter(
                x=all_days,
                y=[ylab] * len(all_days),
                mode="markers",
                marker=dict(size=10, color="rgba(0,0,0,0.001)"),
                hoverinfo="skip",
                name=f"add-note-{t['id']}",
                showlegend=False,
            )
        )

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ
fig.update_layout(
    height=max(380, 52 * max(2, len(cat_labels))),
    margin=dict(l=20, r=20, t=10, b=10),
    xaxis=dict(
        range=[pd.Timestamp(START), pd.Timestamp(END)],
        showgrid=False,
        showline=False,
        zeroline=False,
        tickformat="%d %b",
        ticks="outside",
        ticklen=4,
        tickcolor="rgba(0,0,0,0.3)",
    ),
    yaxis=dict(
        categoryorder="array",
        categoryarray=cat_labels[::-1],  # –î–ù–ò –≤–Ω–∏–∑—É
        showgrid=False,
        showline=False,
        zeroline=False,
        title="",
    ),
    hovermode="closest",
)

# –ë–µ–∑ –ª–∏—à–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫
config = {"displaylogo": False, "displayModeBar": False}

# –†–µ–Ω–¥–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–ª–∏–∫–æ–≤
clicked = plotly_events(
    fig,
    click_event=True,
    select_event=False,
    hover_event=False,
    override_height=fig.layout.height,
    override_width="100%",
    key="timeline-minimal",
    config=config,
)

# =====================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ä–æ–∂–µ–∫/–∑–∞–º–µ—Ç–æ–∫)
# =====================
if clicked:
    pt = clicked[0]
    ylab = pt.get("y")
    xval = to_date(pt.get("x"))

    if isinstance(ylab, str) and ylab.startswith(CAT_GROUP_PREFIX):
        # –∫–ª–∏–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –≥—Ä—É–ø–ø—ã => –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ä–æ–∂–∫—É
        gname = ylab.replace(CAT_GROUP_PREFIX, "", 1)
        with st.modal(f"–ù–æ–≤–∞—è –¥–æ—Ä–æ–∂–∫–∞ –≤ –≥—Ä—É–ø–ø–µ ‚Äò{gname}‚Äô"):
            name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Ä–æ–∂–∫–∏", max_chars=48)
            if st.button("–î–æ–±–∞–≤–∏—Ç—å", use_container_width=True):
                if name:
                    new_id = f"{gname}:{name}:{int(datetime.now().timestamp())}"
                    st.session_state.tracks.append({"id": new_id, "group": gname, "name": name})
                    st.rerun()
                else:
                    st.warning("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")

    elif isinstance(ylab, str) and ylab.startswith(CAT_TRACK_PREFIX):
        # –∫–ª–∏–∫ –ø–æ –¥–æ—Ä–æ–∂–∫–µ => –¥–æ–±–∞–≤–∏—Ç—å/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        tid = track_label_to_id.get(ylab)
        if tid:
            # –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
            idx = None
            for i, e in enumerate(st.session_state.entries):
                if e["track_id"] == tid and to_date(e["date"]) == xval:
                    idx = i
                    break
            existing = st.session_state.entries[idx]["note"] if idx is not None else ""

            with st.modal(f"–ó–∞–º–µ—Ç–∫–∞ ‚Äî {ylab.replace(CAT_TRACK_PREFIX,'',1)} ¬∑ {xval.isoformat()}"):
                note = st.text_area("–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏", value=existing, height=160, label_visibility="collapsed")
                c1, c2 = st.columns([1,1])
                with c1:
                    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", use_container_width=True):
                        if idx is None:
                            st.session_state.entries.append({"date": xval.isoformat(), "track_id": tid, "note": note.strip()})
                        else:
                            st.session_state.entries[idx]["note"] = note.strip()
                        st.rerun()
                with c2:
                    if st.button("–£–¥–∞–ª–∏—Ç—å —Ç–æ—á–∫—É", use_container_width=True):
                        if idx is not None:
                            st.session_state.entries.pop(idx)
                        st.rerun()

# –ù–∏–∑ ‚Äî –ª—ë–≥–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ (–±–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤)
st.caption("–ö–ª–∏–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥—Ä—É–ø–ø—ã ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ä–æ–∂–∫—É. –ö–ª–∏–∫ –ø–æ —Å—Ç—Ä–æ–∫–µ –¥–æ—Ä–æ–∂–∫–∏ ‚Äî —Å–æ–∑–¥–∞—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É. –¢–æ—á–∫–∏ –±–µ–∑ –∑–∞–º–µ—Ç–æ–∫ ‚Äî –º–∏–∫—Ä–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏; —Å —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ ‚Äò–∑–≤—ë–∑–¥—ã‚Äô –∏ —Ä–∞—Å—Ç—É—Ç.")
