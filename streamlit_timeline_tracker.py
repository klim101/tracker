# Timeline Tracker ‚Äî –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è ¬´–Ω–æ—Ç–Ω–∞—è —Ç–µ—Ç—Ä–∞–¥—å¬ª
# –ó–∞–ø—É—Å–∫: pip install streamlit plotly pandas python-dateutil streamlit-plotly-events
#         streamlit run streamlit_timeline_tracker.py

from __future__ import annotations
import json
from datetime import date, datetime, timedelta
from typing import Dict, List

import pandas as pd
import plotly.graph_objects as go
import streamlit as st
from dateutil.relativedelta import relativedelta

# –ó–∞—Ö–≤–∞—Ç –∫–ª–∏–∫–æ–≤: –ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç –Ω–∞ –ª–µ—Ç—É
import sys, subprocess

def _get_plotly_events():
    try:
        from streamlit_plotly_events import plotly_events as _pe
        return _pe
    except Exception:
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", "streamlit-plotly-events>=0.0.6", "--quiet"])  # –∞–≤—Ç–æ-—É—Å—Ç–∞–Ω–æ–≤–∫–∞
            from streamlit_plotly_events import plotly_events as _pe
            return _pe
        except Exception:
            return None

_PLOTLY_EVENTS = _get_plotly_events()
_HAS_EVENTS = _PLOTLY_EVENTS is not None

def _plotly_events(fig, **kwargs):
    if _PLOTLY_EVENTS:
        return _PLOTLY_EVENTS(fig, **kwargs)
    st.plotly_chart(fig, use_container_width=True)
    return []

st.set_page_config(page_title="Timeline Tracker", layout="wide")

# –ü–æ—è—Å–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–ª–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
if not _HAS_EVENTS:
    st.info("–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: —Å—Ç–∞–≤–ª—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –∫–ª–∏–∫–æ–≤‚Ä¶ –ï—Å–ª–∏ –∫–ª–∏–∫–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")

# =====================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
# =====================

def today() -> date:
    return date.today()


def to_date(x) -> date:
    if isinstance(x, date):
        return x
    return pd.to_datetime(x).date()


def start_of_month(d: date) -> date:
    return d.replace(day=1)


def days_in_month(d: date) -> int:
    first = start_of_month(d)
    nxt = first + relativedelta(months=1)
    return (nxt - first).days


def dot_size_empty() -> int:
    return 2  # –ø–æ—á—Ç–∏ —Ç–æ—á–∫–∞


def note_size(note: str) -> int:
    """–†–∞–∑–º–µ—Ä ‚Äò–Ω–æ—Ç—ã‚Äô —Ä–∞—Å—Ç—ë—Ç —Å –¥–ª–∏–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ (reward‚Äë–º–µ—Ö–∞–Ω–∏–∫–∞)."""
    n = len((note or "").strip())
    if n <= 0:
        return dot_size_empty()
    # 10..28
    return max(10, min(28, 8 + n // 4))


# =====================
# Session State (–¥–∞–Ω–Ω—ã–µ)
# =====================
if "groups" not in st.session_state:
    st.session_state.groups: List[str] = ["–†–∞–±–æ—Ç–∞", "–õ–∏—á–Ω–æ–µ"]

if "tracks" not in st.session_state:
    # —Å–ø–∏—Å–æ–∫ –¥–æ—Ä–æ–∂–µ–∫: {id, group, name}
    st.session_state.tracks: List[Dict] = []

if "entries" not in st.session_state:
    # –æ—Ç–º–µ—Ç–∫–∏: {date: ISO, track_id: str, note: str}
    st.session_state.entries: List[Dict] = []

if "birthday" not in st.session_state:
    st.session_state.birthday = {"m": 9, "d": 28}  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 28 —Å–µ–Ω—Ç—è–±—Ä—è

# ===== –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ ¬´—Å–µ–≥–æ–¥–Ω—è¬ª: 90 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –∏ 90 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥ =====
TODAY = today()
DAYS_BEFORE = 90
DAYS_AFTER = 90
START = TODAY - timedelta(days=DAYS_BEFORE)
FINISH = TODAY + timedelta(days=DAYS_AFTER)
all_days = pd.date_range(START, FINISH, freq="D")

# =====================
# –®–∞–ø–∫–∞ (–º–∏–Ω–∏–º–∞–ª–∏–∑–º)
# =====================
now = datetime.now()
hour = now.hour
if 5 <= hour < 11:
    day_emoji = "üåÖ"
elif 11 <= hour < 17:
    day_emoji = "‚òÄÔ∏è"
elif 17 <= hour < 22:
    day_emoji = "üåá"
else:
    day_emoji = "üåô"

m_first = start_of_month(TODAY)
month_pct = int(round(((TODAY - m_first).days) / max(1, days_in_month(TODAY)) * 100))

b = st.session_state.birthday
next_bd_year = TODAY.year if (TODAY.month, TODAY.day) <= (b["m"], b["d"]) else TODAY.year + 1
next_bd = date(next_bd_year, b["m"], b["d"])
days_to_bd = (next_bd - TODAY).days

colA, colB = st.columns([1, 2])
with colA:
    st.markdown(f"### {day_emoji} \- {TODAY.strftime('%d %b %Y')}")
with colB:
    st.markdown(f"**–ú–µ—Å—è—Ü ~{month_pct}%** ¬∑ **–¥–æ –î–† {days_to_bd} –¥–Ω.**")

# =====================
# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ—Å—å Y)
# =====================
NEW_GROUP_LABEL = "‚ñß + –ù–æ–≤–∞—è –ø–æ–¥–≥—Ä—É–ø–ø–∞"
CAT_GROUP_PREFIX = "‚ñß "     # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã
CAT_TRACK_PREFIX = "‚Ä¢ "     # –¥–æ—Ä–æ–∂–∫–∞

cat_labels: List[str] = [NEW_GROUP_LABEL]
for g in st.session_state.groups:
    cat_labels.append(f"{CAT_GROUP_PREFIX}{g}")
    for t in st.session_state.tracks:
        if t["group"] == g:
            cat_labels.append(f"{CAT_TRACK_PREFIX}{t['name']}")
cat_labels.append("–î–ù–ò")  # –±–∞–∑–æ–≤–∞—è —à–∫–∞–ª–∞

# –º–∞–ø–ø–∏–Ω–≥–∏
track_label_to_id: Dict[str, str] = {}
for t in st.session_state.tracks:
    track_label_to_id[f"{CAT_TRACK_PREFIX}{t['name']}"] = t["id"]

# entries -> df
if st.session_state.entries:
    df_e = pd.DataFrame(st.session_state.entries)
    df_e["date"] = pd.to_datetime(df_e["date"]).dt.date
else:
    df_e = pd.DataFrame(columns=["date", "track_id", "note"])  # –ø—É—Å—Ç–æ

# =====================
# –§–∏–≥—É—Ä–∞ (–Ω–æ—Ç–Ω–∞—è —Ç–µ—Ç—Ä–∞–¥—å)
# =====================
fig = go.Figure()

# –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è ¬´—Å–µ–π—á–∞—Å¬ª —Å—Ç—Ä–æ–≥–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É –æ–∫–Ω–∞
fig.add_vline(x=pd.Timestamp(TODAY), line_width=1, line_dash="dot", line_color="rgba(0,0,0,0.65)")
# –ú–∞–ª–µ–Ω—å–∫–∏–π —Å–∏–º–≤–æ–ª –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –Ω–∞ –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–∏
fig.add_annotation(x=pd.Timestamp(TODAY), y="–î–ù–ò", text=day_emoji, showarrow=False, yshift=10, opacity=0.9)

# –ë–∞–∑–æ–≤–∞—è –Ω–∏–∂–Ω—è—è —à–∫–∞–ª–∞ ¬´–î–ù–ò¬ª
fig.add_trace(
    go.Scatter(
        x=all_days,
        y=["–î–ù–ò"] * len(all_days),
        mode="lines",
        line=dict(color="rgba(0,0,0,0.25)", width=1),
        hoverinfo="skip",
        showlegend=False,
    )
)
# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∏—Å–∫–∏
fig.add_trace(
    go.Scatter(
        x=all_days,
        y=["–î–ù–ò"] * len(all_days),
        mode="markers",
        marker=dict(symbol="line-ns-open", size=12, color="rgba(0,0,0,0.25)"),
        hoverinfo="skip",
        showlegend=False,
    )
)

# –°—Ç—Ä–æ–∫–∞ ¬´–ù–æ–≤–∞—è –ø–æ–¥–≥—Ä—É–ø–ø–∞¬ª ‚Äî –ª—ë–≥–∫–∞—è –ø—É–Ω–∫—Ç–∏—Ä–Ω–∞—è + –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π —Å–ª–æ–π
fig.add_trace(
    go.Scatter(
        x=[all_days.min(), all_days.max()],
        y=[NEW_GROUP_LABEL, NEW_GROUP_LABEL],
        mode="lines",
        line=dict(color="rgba(0,0,0,0.12)", width=1, dash="dot"),
        hoverinfo="skip",
        showlegend=False,
    )
)
fig.add_trace(
    go.Scatter(
        x=all_days,
        y=[NEW_GROUP_LABEL] * len(all_days),
        mode="markers",
        marker=dict(size=12, color="rgba(0,0,0,0.001)"),
        hoverinfo="skip",
        name="add-group",
        showlegend=False,
    )
)

# –°—Ç—Ä–æ–∫–∏ –≥—Ä—É–ø–ø + –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å–ª–æ–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
for g in st.session_state.groups:
    ylab = f"{CAT_GROUP_PREFIX}{g}"
    fig.add_trace(
        go.Scatter(
            x=[all_days.min(), all_days.max()],
            y=[ylab, ylab],
            mode="lines",
            line=dict(color="rgba(0,0,0,0.15)", width=1, dash="dot"),
            hoverinfo="skip",
            showlegend=False,
        )
    )
    # –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π —Å–ª–æ–π (–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª–∫—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏: +–¥–æ—Ä–æ–∂–∫–∞ / –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å / —É–¥–∞–ª–∏—Ç—å)
    fig.add_trace(
        go.Scatter(
            x=all_days,
            y=[ylab] * len(all_days),
            mode="markers",
            marker=dict(size=14, color="rgba(0,0,0,0.001)"),
            hoverinfo="skip",
            name=f"group-actions-{g}",
            showlegend=False,
        )
    )

# –î–æ—Ä–æ–∂–∫–∏: —Ç–æ–Ω–∫–∞—è –ª–∏–Ω–∏—è + —Ç–æ—á–∫–∏ (–ø—É—Å—Ç—ã–µ) –∏ –Ω–æ—Ç—ã (—Å –∑–∞–º–µ—Ç–∫–æ–π)
for g in st.session_state.groups:
    for t in [t for t in st.session_state.tracks if t["group"] == g]:
        ylab = f"{CAT_TRACK_PREFIX}{t['name']}"
        # –ª–∏–Ω–∏—è –¥–æ—Ä–æ–∂–∫–∏
        fig.add_trace(
            go.Scatter(
                x=[all_days.min(), all_days.max()],
                y=[ylab, ylab],
                mode="lines",
                line=dict(color="rgba(0,0,0,0.25)", width=1),
                hoverinfo="skip",
                showlegend=False,
            )
        )
        # –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ—á–∫–∞–º
        if not df_e.empty:
            dsub = df_e.loc[df_e["track_id"] == t["id"]].copy()
            dsub = dsub[(dsub["date"] >= START) & (dsub["date"] <= FINISH)]
        else:
            dsub = pd.DataFrame(columns=df_e.columns)

        if not dsub.empty:
            # –ü—É—Å—Ç—ã–µ –∑–∞–º–µ—Ç–∫–∏ -> –º–∞–ª–µ–Ω—å–∫–∏–µ –∫—Ä—É–∂–∫–∏
            empty_mask = dsub["note"].fillna("").str.strip() == ""
            if empty_mask.any():
                d0 = dsub[empty_mask]
                fig.add_trace(
                    go.Scatter(
                        x=pd.to_datetime(d0["date"]),
                        y=[ylab] * len(d0),
                        mode="markers",
                        marker=dict(size=[dot_size_empty()] * len(d0), symbol="circle", color="rgba(0,0,0,0.65)"),
                        hovertemplate=(
                            "<b>" + t['name'] + "</b><br>–î–∞—Ç–∞: %{x|%Y-%m-%d}<br>–ó–∞–º–µ—Ç–∫–∞: ‚Äî<extra></extra>"
                        ),
                        showlegend=False,
                    )
                )
            # –ï—Å—Ç—å –∑–∞–º–µ—Ç–∫–∞ -> —Ä–∏—Å—É–µ–º —Å–∏–º–≤–æ–ª—ã –Ω–æ—Ç ‚ô™/‚ô´ –∫–∞–∫ —Ç–µ–∫—Å—Ç
            filled = dsub[~empty_mask]
            if not filled.empty:
                sizes = [note_size(n) for n in filled["note"].tolist()]
                glyphs = ["‚ô´" if len((n or '').strip()) > 24 else "‚ô™" for n in filled["note"].tolist()]
                fig.add_trace(
                    go.Scatter(
                        x=pd.to_datetime(filled["date"]),
                        y=[ylab] * len(filled),
                        mode="text",
                        text=glyphs,
                        textposition="middle center",
                        textfont=dict(size=sizes, color="rgba(0,0,0,0.85)"),
                        hovertemplate=(
                            "<b>" + t['name'] + "</b><br>–î–∞—Ç–∞: %{x|%Y-%m-%d}<br>–ó–∞–º–µ—Ç–∫–∞: %{text_custom}<extra></extra>"
                        ),
                        text_custom=filled["note"].fillna("‚Äî"),
                        showlegend=False,
                    )
                )
        # –Ω–µ–≤–∏–¥–∏–º—ã–π —Å–ª–æ–π –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º –¥–∞–Ω–Ω–æ–π –¥–æ—Ä–æ–∂–∫–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫)
        fig.add_trace(
            go.Scatter(
                x=all_days,
                y=[ylab] * len(all_days),
                mode="markers",
                marker=dict(size=14, color="rgba(0,0,0,0.001)"),
                hoverinfo="skip",
                name=f"add-note-{t['id']}",
                showlegend=False,
            )
        )

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ (–º–∏–Ω–∏–º–∞–ª–∏–∑–º, –±–µ–∑ –≤—ã–¥–µ–ª–µ–Ω–∏–π)
fig.update_layout(
    height=max(420, 56 * max(2, len(cat_labels))),
    margin=dict(l=20, r=20, t=10, b=10),
    dragmode="zoom",  # –æ—Ç–∫–ª—é—á–∞–µ–º –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ –õ–ö–ú, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∏–∫–∏
    xaxis=dict(
        range=[pd.Timestamp(START), pd.Timestamp(FINISH)],
        showgrid=False,
        showline=False,
        zeroline=False,
        tickformat="%d %b",
        ticks="outside",
        ticklen=4,
        tickcolor="rgba(0,0,0,0.3)",
    ),
    yaxis=dict(
        categoryorder="array",
        categoryarray=cat_labels[::-1],  # –î–ù–ò –≤–Ω–∏–∑—É
        showgrid=False,
        showline=False,
        zeroline=False,
        title="",
    ),
    hovermode="closest",
    clickmode="event+select",
)

config = {
    "displaylogo": False,
    "displayModeBar": False,
    "scrollZoom": False,
    "doubleClick": "reset",
}

# –†–µ–Ω–¥–µ—Ä (–∫–ª–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –∏ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–¥ –≥—Ä—É–ø–ø–∞–º–∏)
clicked = _plotly_events(
    fig,
    click_event=True,
    select_event=False,
    hover_event=False,
    override_height=fig.layout.height,
    override_width="100%",
    key="timeline-minimal",
)

# =====================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ (–ø—Ä–æ—Å—Ç—ã–µ –º–æ–¥–∞–ª–∫–∏ –≤–º–µ—Å—Ç–æ UI)
# =====================
if clicked:
    pt = clicked[0]
    ylab = pt.get("y")
    xval = to_date(pt.get("x"))

    # 1) –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–≥—Ä—É–ø–ø—ã
    if isinstance(ylab, str) and ylab == NEW_GROUP_LABEL:
        with st.modal("–ù–æ–≤–∞—è –ø–æ–¥–≥—Ä—É–ø–ø–∞"):
            gname = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–≥—Ä—É–ø–ø—ã", max_chars=48)
            if st.button("–î–æ–±–∞–≤–∏—Ç—å", use_container_width=True):
                if gname and gname not in st.session_state.groups:
                    st.session_state.groups.append(gname)
                    st.rerun()
                else:
                    st.warning("–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")

    # 2) –î–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –≥—Ä—É–ø–ø–æ–π: –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ä–æ–∂–∫—É / –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å / —É–¥–∞–ª–∏—Ç—å
    elif isinstance(ylab, str) and ylab.startswith(CAT_GROUP_PREFIX):
        old = ylab.replace(CAT_GROUP_PREFIX, "", 1)
        with st.modal(f"–ì—Ä—É–ø–ø–∞: {old}"):
            mode = st.radio("–î–µ–π—Å—Ç–≤–∏–µ", ["–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ä–æ–∂–∫—É", "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", "–£–¥–∞–ª–∏—Ç—å"], horizontal=True)
            if mode == "–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ä–æ–∂–∫—É":
                name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Ä–æ–∂–∫–∏", max_chars=48)
                if st.button("–î–æ–±–∞–≤–∏—Ç—å", use_container_width=True):
                    if name:
                        new_id = f"{old}:{name}:{int(datetime.now().timestamp())}"
                        st.session_state.tracks.append({"id": new_id, "group": old, "name": name})
                        st.rerun()
            elif mode == "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å":
                new_g = st.text_input("–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã", value=old, max_chars=48)
                if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", use_container_width=True):
                    new_g = new_g.strip()
                    if new_g and new_g != old and new_g not in st.session_state.groups:
                        # –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É –∏ —Ç—Ä–µ–∫–∏
                        st.session_state.groups = [new_g if g == old else g for g in st.session_state.groups]
                        for i in range(len(st.session_state.tracks)):
                            if st.session_state.tracks[i]["group"] == old:
                                st.session_state.tracks[i]["group"] = new_g
                        st.rerun()
                    else:
                        st.warning("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è")
            else:  # –£–¥–∞–ª–∏—Ç—å
                has_tracks = any(t["group"] == old for t in st.session_state.tracks)
                if has_tracks:
                    st.info("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å: –≤ –≥—Ä—É–ø–ø–µ –µ—Å—Ç—å –¥–æ—Ä–æ–∂–∫–∏. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –∏—Ö.")
                if st.button("–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", use_container_width=True, disabled=has_tracks):
                    st.session_state.groups = [g for g in st.session_state.groups if g != old]
                    st.rerun()

    # 3) –î–æ–±–∞–≤–∏—Ç—å/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –Ω–∞ –¥–æ—Ä–æ–∂–∫–µ
    elif isinstance(ylab, str) and ylab.startswith(CAT_TRACK_PREFIX):
        tid = track_label_to_id.get(ylab)
        if tid:
            # –ø–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –¥–∞—Ç—É
            idx = None
            for i, e in enumerate(st.session_state.entries):
                if e["track_id"] == tid and to_date(e["date"]) == xval:
                    idx = i
                    break
            existing = st.session_state.entries[idx]["note"] if idx is not None else ""

            with st.modal(f"–ó–∞–º–µ—Ç–∫–∞ ‚Äî {ylab.replace(CAT_TRACK_PREFIX,'',1)} ¬∑ {xval.isoformat()}"):
                note = st.text_area("–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏", value=existing, height=160, label_visibility="collapsed")
                c1, c2 = st.columns([1,1])
                with c1:
                    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", use_container_width=True):
                        if idx is None:
                            st.session_state.entries.append({"date": xval.isoformat(), "track_id": tid, "note": note.strip()})
                        else:
                            st.session_state.entries[idx]["note"] = note.strip()
                        st.rerun()
                with c2:
                    if st.button("–£–¥–∞–ª–∏—Ç—å —Ç–æ—á–∫—É", use_container_width=True):
                        if idx is not None:
                            st.session_state.entries.pop(idx)
                        st.rerun()

# –õ—ë–≥–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ (1 —Å—Ç—Ä–æ–∫–∞)
st.caption("–õ–ö–ú –ø–æ –¥–æ—Ä–æ–∂–∫–µ –≤ –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å ‚Äî —Å–æ–∑–¥–∞—Ç—å/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É. –õ–ö–ú –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥—Ä—É–ø–ø—ã ‚Äî +–¥–æ—Ä–æ–∂–∫–∞/–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å/—É–¥–∞–ª–∏—Ç—å. ‚Äò‚ñß + –ù–æ–≤–∞—è –ø–æ–¥–≥—Ä—É–ø–ø–∞‚Äô ‚Äî —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É. –°–µ–≥–æ–¥–Ω—è –ø–æ —Ü–µ–Ω—Ç—Ä—É.")
